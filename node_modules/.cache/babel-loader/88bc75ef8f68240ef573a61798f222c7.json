{"ast":null,"code":"var _jsxFileName = \"/Users/citrounette/Documents/Projets/WCS_Project_2/paris-0320-project2-howToBeFat/src/components/RecipeCard.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport RecipeSearch from './RecipeSearch';\nimport DisplayRecipe from './DisplayRecipe';\n\nclass RecipeCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      recipe: '',\n      ingredients: [] // ingredient1: \"\",\n      // ingredient2: \"\",\n      // ingredient3: \"\",\n      // errorIngredient: \"\",\n      // userCalories: 0\n\n    };\n\n    this.randomNumber = max => Math.floor(Math.random() * Math.floor(max));\n\n    this.getOtherRecipe = () => {\n      this.getRecipe();\n    };\n  }\n\n  getRecipe(ingredient1, ingredient2, ingredient3, userCalories) {\n    let selectedIngredients = \"cheese\";\n    const allIngredient = ingredient1 && `${ingredient1},${ingredient2},${ingredient3}`;\n    const min = 0;\n    const max = min + 100;\n    const minCalories = userCalories ? parseInt(userCalories) : 5000;\n    const maxCalories = minCalories + 5000;\n    const customIngredient = allIngredient ? allIngredient : selectedIngredients;\n    let url = `https://api.edamam.com/search?q=${customIngredient}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`;\n    axios.get(url).then(res => {\n      const randomNum = this.randomNumber(max); // base of the calls\n\n      const res1 = res.data.hits; //sort by calories desc\n\n      const thisCalories = res1.map(x => x.recipe.calories).sort((a, b) => b - a)[randomNum]; // Search for the recipe whom match with the max of calories\n\n      const objectUri = res1.filter(x => x.recipe.calories === thisCalories)[0]; // Define the state with the research recipe and the ingredients which go with\n\n      this.setState({\n        recipe: objectUri.recipe,\n        ingredients: objectUri.recipe.ingredientLines // ingredient1: '',\n        // ingredient2: '',\n        // ingredient3: '',\n        // errorIngredient: \"\"\n\n      });\n    }); // .catch(error => this.setState({ errorIngredient: \"Erreur dans la saie des ingrédients\" }))\n  }\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0;\n    const unity = hours > 1 ? \"hours\" : \"hour\";\n    const minutes = time > 60 ? time % 60 : time;\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`;\n  } // submitForm = (e) => {\n  //   e.preventDefault()\n  //   this.getRecipe(this.state.ingredient1, this.state.ingredient2, this.state.ingredient3, this.state.userCalories)\n  //   console.log(this.state.ingredient1, \"ingredient1\")\n  //   console.log(this.state.ingredient2, \"ingredient2\")\n  //   console.log(this.state.ingredient3, \"ingredient3\")\n  // }\n\n\n  // handleChange = (e) => {\n  //   let userIngredient1 = e.target.id === \"firstIngredient\" ? e.target.value : this.state.ingredient1\n  //   let userIngredient2 = e.target.id === \"secondIngredient\" ? e.target.value : this.state.ingredient2\n  //   let userIngredient3 = e.target.id === \"thirdIngredient\" ? e.target.value : this.state.ingredient3\n  //   let actualUserCalories = e.target.id === \"actualUserCalories\" ? e.target.value : this.state.userCalories\n  //   this.setState({\n  //     ingredient1: userIngredient1,\n  //     ingredient2: userIngredient2,\n  //     ingredient3: userIngredient3,\n  //     userCalories: actualUserCalories,\n  //   })\n  //   // console.log(this.state.ingredient3)\n  // }\n  componentDidMount() {\n    this.getRecipe();\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime;\n    const calories = Math.round(this.state.recipe.calories);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"RecipeCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DisplayRecipe, {\n      getOtherRecipe: this.getOtherRecipe,\n      ingredientsList: this.state.ingredients,\n      recipe: this.state.recipe,\n      preparationTime: this.getPreparationTime(totalTime),\n      calories: calories,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default RecipeCard;","map":{"version":3,"sources":["/Users/citrounette/Documents/Projets/WCS_Project_2/paris-0320-project2-howToBeFat/src/components/RecipeCard.js"],"names":["React","axios","RecipeSearch","DisplayRecipe","RecipeCard","Component","state","recipe","ingredients","randomNumber","max","Math","floor","random","getOtherRecipe","getRecipe","ingredient1","ingredient2","ingredient3","userCalories","selectedIngredients","allIngredient","min","minCalories","parseInt","maxCalories","customIngredient","url","get","then","res","randomNum","res1","data","hits","thisCalories","map","x","calories","sort","a","b","objectUri","filter","setState","ingredientLines","getPreparationTime","time","hours","unity","minutes","componentDidMount","render","totalTime","round"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport RecipeSearch from './RecipeSearch'\nimport DisplayRecipe from './DisplayRecipe'\n\nclass RecipeCard extends React.Component {\n\n  state = {\n    recipe: '',\n    ingredients: []\n    // ingredient1: \"\",\n    // ingredient2: \"\",\n    // ingredient3: \"\",\n    // errorIngredient: \"\",\n    // userCalories: 0\n  }\n\n  getRecipe(ingredient1, ingredient2, ingredient3, userCalories) {\n\n    let selectedIngredients = \"cheese\"\n    const allIngredient = ingredient1 && `${ingredient1},${ingredient2},${ingredient3}`\n    const min = 0\n    const max = min + 100\n    const minCalories = userCalories ? parseInt(userCalories) : 5000\n    const maxCalories = minCalories + 5000\n    const customIngredient = allIngredient ? allIngredient : selectedIngredients\n    let url = `https://api.edamam.com/search?q=${customIngredient}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`\n\n    axios.get(url)\n      .then((res) => {\n        const randomNum = this.randomNumber(max)\n        // base of the calls\n        const res1 = res.data.hits\n        //sort by calories desc\n        const thisCalories = res1.map(x => x.recipe.calories).sort((a, b) => b - a)[randomNum]\n        // Search for the recipe whom match with the max of calories\n        const objectUri = res1.filter(x => x.recipe.calories === thisCalories)[0]\n        // Define the state with the research recipe and the ingredients which go with\n        this.setState({\n          recipe: objectUri.recipe,\n          ingredients: objectUri.recipe.ingredientLines,\n          // ingredient1: '',\n          // ingredient2: '',\n          // ingredient3: '',\n          // errorIngredient: \"\"\n        })\n      })\n    // .catch(error => this.setState({ errorIngredient: \"Erreur dans la saie des ingrédients\" }))\n\n  }\n\n  randomNumber = (max) => Math.floor(Math.random() * Math.floor(max))\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0\n    const unity = hours > 1 ? \"hours\" : \"hour\"\n    const minutes = time > 60 ? time % 60 : time\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`\n  }\n\n  // submitForm = (e) => {\n  //   e.preventDefault()\n  //   this.getRecipe(this.state.ingredient1, this.state.ingredient2, this.state.ingredient3, this.state.userCalories)\n  //   console.log(this.state.ingredient1, \"ingredient1\")\n  //   console.log(this.state.ingredient2, \"ingredient2\")\n  //   console.log(this.state.ingredient3, \"ingredient3\")\n  // }\n  getOtherRecipe = () => {\n    this.getRecipe()\n  }\n\n  // handleChange = (e) => {\n  //   let userIngredient1 = e.target.id === \"firstIngredient\" ? e.target.value : this.state.ingredient1\n  //   let userIngredient2 = e.target.id === \"secondIngredient\" ? e.target.value : this.state.ingredient2\n  //   let userIngredient3 = e.target.id === \"thirdIngredient\" ? e.target.value : this.state.ingredient3\n  //   let actualUserCalories = e.target.id === \"actualUserCalories\" ? e.target.value : this.state.userCalories\n\n\n  //   this.setState({\n  //     ingredient1: userIngredient1,\n  //     ingredient2: userIngredient2,\n  //     ingredient3: userIngredient3,\n  //     userCalories: actualUserCalories,\n  //   })\n  //   // console.log(this.state.ingredient3)\n  // }\n\n  componentDidMount() {\n    this.getRecipe()\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime\n    const calories = Math.round(this.state.recipe.calories)\n\n    return (\n      <div className=\"RecipeCard\" >\n        <DisplayRecipe getOtherRecipe={this.getOtherRecipe} ingredientsList={this.state.ingredients} recipe={this.state.recipe} preparationTime={this.getPreparationTime(totalTime)} calories={calories} />\n      </div>\n    );\n  }\n}\n\nexport default RecipeCard"]},"metadata":{},"sourceType":"module"}