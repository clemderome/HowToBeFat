{"ast":null,"code":"var _jsxFileName = \"/Users/citrounette/Documents/Projets/WCS_Project_2/paris-0320-project2-howToBeFat/src/components/RecipeCard.js\";\nimport axios from 'axios';\nimport React from 'react';\nimport DisplayRecipe from './DisplayRecipe';\n\nclass RandomRecipeCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.randomNumber = max => Math.floor(Math.random() * Math.floor(max));\n\n    this.state = {\n      recipe: '',\n      ingredients: [],\n      UserChoice: false\n    };\n    this.getRecipe = this.getRecipe.bind(this);\n  }\n\n  getRecipe() {\n    let selectedIngredients = \"cheese\";\n    const min = 0;\n    const max = min + 50;\n    const minCalories = 5000;\n    const maxCalories = 10000;\n    let url = `https://api.edamam.com/search?q=${selectedIngredients}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`;\n    axios.get(url).then(res => {\n      const randomNum = this.randomNumber(max);\n      console.log(randomNum, \"randomNum\"); // base of the calls\n\n      const res1 = res.data.hits; //sort by calories desc\n\n      const maxCalories = res1.map(x => x.recipe.calories).sort((a, b) => b - a)[randomNum]; // Search for the recipe whom match with the max of calories\n\n      const objectUri = res1.filter(x => x.recipe.calories === maxCalories)[0]; // Define the state with the research recipe and the ingredients which go with\n\n      this.setState({\n        recipe: objectUri.recipe,\n        ingredients: objectUri.recipe.ingredientLines\n      });\n    });\n  }\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0;\n    const unity = hours > 1 ? \"hours\" : \"hour\";\n    const minutes = time > 60 ? time % 60 : time;\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`;\n  }\n\n  componentDidMount() {\n    this.getRecipe();\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime;\n    const calories = Math.round(this.state.recipe.calories);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"RandomRecipeCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, this.state.UserChoice, /*#__PURE__*/React.createElement(DisplayRecipe, {\n      ingredientsList: this.state.ingredients,\n      recipe: this.state.recipe,\n      preparationTime: this.getPreparationTime(totalTime),\n      calories: calories,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default RandomRecipeCard;","map":{"version":3,"sources":["/Users/citrounette/Documents/Projets/WCS_Project_2/paris-0320-project2-howToBeFat/src/components/RecipeCard.js"],"names":["axios","React","DisplayRecipe","RandomRecipeCard","Component","constructor","props","randomNumber","max","Math","floor","random","state","recipe","ingredients","UserChoice","getRecipe","bind","selectedIngredients","min","minCalories","maxCalories","url","get","then","res","randomNum","console","log","res1","data","hits","map","x","calories","sort","a","b","objectUri","filter","setState","ingredientLines","getPreparationTime","time","hours","unity","minutes","componentDidMount","render","totalTime","round"],"mappings":"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","sourcesContent":["\nimport axios from 'axios'\nimport React from 'react'\n\nimport DisplayRecipe from './DisplayRecipe'\n\nclass RandomRecipeCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipe: '',\n      ingredients: [],\n      UserChoice: false\n    }\n    this.getRecipe = this.getRecipe.bind(this)\n  }\n\n  getRecipe() {\n    let selectedIngredients = \"cheese\"\n    const min = 0\n    const max = min + 50\n    const minCalories = 5000\n    const maxCalories = 10000\n    let url = `https://api.edamam.com/search?q=${selectedIngredients}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`\n    axios.get(url)\n      .then((res) => {\n        const randomNum = this.randomNumber(max)\n        console.log(randomNum, \"randomNum\")\n        // base of the calls\n        const res1 = res.data.hits\n        //sort by calories desc\n        const maxCalories = res1.map(x => x.recipe.calories).sort((a, b) => b - a)[randomNum]\n        // Search for the recipe whom match with the max of calories\n        const objectUri = res1.filter(x => x.recipe.calories === maxCalories)[0]\n        // Define the state with the research recipe and the ingredients which go with\n        this.setState({\n          recipe: objectUri.recipe,\n          ingredients: objectUri.recipe.ingredientLines\n        })\n      })\n  }\n\n  randomNumber = (max) => Math.floor(Math.random() * Math.floor(max))\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0\n    const unity = hours > 1 ? \"hours\" : \"hour\"\n    const minutes = time > 60 ? time % 60 : time\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`\n  }\n\n  componentDidMount() {\n    this.getRecipe()\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime\n    const calories = Math.round(this.state.recipe.calories)\n\n    return (\n      <div className=\"RandomRecipeCard\" >\n        {// Await for the futur user choice possibilities // =>\n        }{this.state.UserChoice}\n\n        <DisplayRecipe ingredientsList={this.state.ingredients} recipe={this.state.recipe} preparationTime={this.getPreparationTime(totalTime)} calories={calories} />\n      </div>\n    );\n  }\n}\n\nexport default RandomRecipeCard"]},"metadata":{},"sourceType":"module"}