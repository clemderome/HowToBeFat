{"ast":null,"code":"var _jsxFileName = \"/Users/citrounette/Documents/HTBF/src/components/recipeSearch/DisplayResults/RecipeInfos.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './RecipeInfos.css'; // Define custom message depending of time of preparation\n\nconst getPreparationTime = time => {\n  const hours = time > 60 ? Math.floor(time / 60) : 0;\n  const unity = hours > 1 ? \"hours\" : \"hour\";\n  const minutes = time > 60 ? time % 60 : time;\n  return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`;\n};\n\nconst RecipeInfos = props => /*#__PURE__*/React.createElement(\"article\", {\n  className: \"recipeInfos\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"aside\", {\n  className: \"infos\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"h4\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }\n}, \"Calories\"), /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 7\n  }\n}, Math.round(props.calories), \" Kcal\")), /*#__PURE__*/React.createElement(\"aside\", {\n  className: \"infos\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"h4\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }\n}, \"Prep time\"), /*#__PURE__*/React.createElement(\"p\", {\n  title: getPreparationTime(props.time),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }\n}, props.time ? `${props.time} minutes` : \"Not available\", \" \")));\n\nRecipeInfos.propTypes = {\n  calories: PropTypes.number.isRequired,\n  time: PropTypes.number.isRequired\n};\nexport default RecipeInfos;","map":{"version":3,"sources":["/Users/citrounette/Documents/HTBF/src/components/recipeSearch/DisplayResults/RecipeInfos.js"],"names":["React","PropTypes","getPreparationTime","time","hours","Math","floor","unity","minutes","RecipeInfos","props","round","calories","propTypes","number","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,mBAAP,C,CAEA;;AACA,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;AACnC,QAAMC,KAAK,GAAGD,IAAI,GAAG,EAAP,GAAYE,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAZ,GAAoC,CAAlD;AACA,QAAMI,KAAK,GAAGH,KAAK,GAAG,CAAR,GAAY,OAAZ,GAAsB,MAApC;AACA,QAAMI,OAAO,GAAGL,IAAI,GAAG,EAAP,GAAYA,IAAI,GAAG,EAAnB,GAAwBA,IAAxC;AACA,SAAOA,IAAI,GAAG,EAAP,GAAa,GAAEC,KAAM,IAAGG,KAAM,QAAOC,OAAQ,UAA7C,GAA0D,GAAEA,OAAQ,UAA3E;AACD,CALD;;AAOA,MAAMC,WAAW,GAAIC,KAAD,iBAClB;AAAS,EAAA,SAAS,EAAC,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAO,EAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIL,IAAI,CAACM,KAAL,CAAWD,KAAK,CAACE,QAAjB,CAAJ,UAFF,CADF,eAKE;AAAO,EAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAG,EAAA,KAAK,EAAEV,kBAAkB,CAACQ,KAAK,CAACP,IAAP,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA2CO,KAAK,CAACP,IAAN,GAAc,GAAEO,KAAK,CAACP,IAAK,UAA3B,GAAuC,eAAlF,MAFF,CALF,CADF;;AAaAM,WAAW,CAACI,SAAZ,GAAwB;AACtBD,EAAAA,QAAQ,EAAEX,SAAS,CAACa,MAAV,CAAiBC,UADL;AAEtBZ,EAAAA,IAAI,EAAEF,SAAS,CAACa,MAAV,CAAiBC;AAFD,CAAxB;AAIA,eAAeN,WAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './RecipeInfos.css'\n\n// Define custom message depending of time of preparation\nconst getPreparationTime = (time) => {\n  const hours = time > 60 ? Math.floor(time / 60) : 0\n  const unity = hours > 1 ? \"hours\" : \"hour\"\n  const minutes = time > 60 ? time % 60 : time\n  return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`\n}\n\nconst RecipeInfos = (props) => (\n  <article className=\"recipeInfos\">\n    <aside className=\"infos\">\n      <h4>Calories</h4>\n      <p>{Math.round(props.calories)} Kcal</p>\n    </aside>\n    <aside className=\"infos\">\n      <h4>Prep time</h4>\n      <p title={getPreparationTime(props.time)}>{props.time ? `${props.time} minutes` : \"Not available\"} </p>\n    </aside>\n  </article>\n)\n\nRecipeInfos.propTypes = {\n  calories: PropTypes.number.isRequired,\n  time: PropTypes.number.isRequired\n}\nexport default RecipeInfos"]},"metadata":{},"sourceType":"module"}