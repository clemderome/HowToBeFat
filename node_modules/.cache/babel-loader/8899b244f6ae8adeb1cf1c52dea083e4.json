{"ast":null,"code":"var _jsxFileName = \"/Users/citrounette/Documents/Projets/WCS_Project_2/paris-0320-project2-howToBeFat/src/components/RecipeCard.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport DisplayRecipe from './DisplayRecipe';\n\nclass RecipeCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      recipe: '',\n      ingredients: [],\n      UserChoice: false,\n      page: ''\n    };\n\n    this.randomNumber = max => Math.floor(Math.random() * Math.floor(max));\n\n    this.handleClickPage = () => {\n      this.setState({\n        page: \"FullRecipe\"\n      });\n    };\n\n    this.getOtherRecipe = () => {\n      this.getRecipe();\n    };\n  }\n\n  getRecipe() {\n    let selectedIngredients = \"cheese\";\n    const min = 0;\n    const max = min + 50;\n    const minCalories = 5000;\n    const maxCalories = 10000;\n    let url = `https://api.edamam.com/search?q=${selectedIngredients}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`;\n    axios.get(url).then(res => {\n      const randomNum = this.randomNumber(max); // base of the calls\n\n      const res1 = res.data.hits; //sort by calories desc\n\n      const thisCalories = res1.map(x => x.recipe.calories).sort((a, b) => b - a)[randomNum]; // Search for the recipe whom match with the max of calories\n\n      const objectUri = res1.filter(x => x.recipe.calories === thisCalories)[0]; // Define the state with the research recipe and the ingredients which go with\n\n      this.setState({\n        recipe: objectUri.recipe,\n        ingredients: objectUri.recipe.ingredientLines\n      });\n    });\n  }\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0;\n    const unity = hours > 1 ? \"hours\" : \"hour\";\n    const minutes = time > 60 ? time % 60 : time;\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`;\n  }\n\n  componentDidMount() {\n    this.getRecipe();\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime;\n    const calories = Math.round(this.state.recipe.calories);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"RecipeCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DisplayRecipe, {\n      getOtherRecipe: this.getOtherRecipe,\n      ingredientsList: this.state.ingredients,\n      recipe: this.state.recipe,\n      preparationTime: this.getPreparationTime(totalTime),\n      calories: calories,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default RecipeCard;","map":{"version":3,"sources":["/Users/citrounette/Documents/Projets/WCS_Project_2/paris-0320-project2-howToBeFat/src/components/RecipeCard.js"],"names":["React","axios","DisplayRecipe","RecipeCard","Component","state","recipe","ingredients","UserChoice","page","randomNumber","max","Math","floor","random","handleClickPage","setState","getOtherRecipe","getRecipe","selectedIngredients","min","minCalories","maxCalories","url","get","then","res","randomNum","res1","data","hits","thisCalories","map","x","calories","sort","a","b","objectUri","filter","ingredientLines","getPreparationTime","time","hours","unity","minutes","componentDidMount","render","totalTime","round"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\n\nimport DisplayRecipe from './DisplayRecipe'\n\nclass RecipeCard extends React.Component {\n\n  state = {\n    recipe: '',\n    ingredients: [],\n    UserChoice: false,\n    page: ''\n  }\n\n  getRecipe() {\n    let selectedIngredients = \"cheese\"\n    const min = 0\n    const max = min + 50\n    const minCalories = 5000\n    const maxCalories = 10000\n    let url = `https://api.edamam.com/search?q=${selectedIngredients}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`\n\n    axios.get(url)\n      .then((res) => {\n        const randomNum = this.randomNumber(max)\n        // base of the calls\n        const res1 = res.data.hits\n        //sort by calories desc\n        const thisCalories = res1.map(x => x.recipe.calories).sort((a, b) => b - a)[randomNum]\n        // Search for the recipe whom match with the max of calories\n        const objectUri = res1.filter(x => x.recipe.calories === thisCalories)[0]\n        // Define the state with the research recipe and the ingredients which go with\n        this.setState({\n          recipe: objectUri.recipe,\n          ingredients: objectUri.recipe.ingredientLines\n        })\n      })\n  }\n\n  randomNumber = (max) => Math.floor(Math.random() * Math.floor(max))\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0\n    const unity = hours > 1 ? \"hours\" : \"hour\"\n    const minutes = time > 60 ? time % 60 : time\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`\n  }\n\n  handleClickPage = () => {\n    this.setState({ page: \"FullRecipe\" })\n  }\n\n  getOtherRecipe = () => {\n    this.getRecipe()\n  }\n\n  componentDidMount() {\n    this.getRecipe()\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime\n    const calories = Math.round(this.state.recipe.calories)\n\n    return (\n      <div className=\"RecipeCard\" >\n        <DisplayRecipe getOtherRecipe={this.getOtherRecipe} ingredientsList={this.state.ingredients} recipe={this.state.recipe} preparationTime={this.getPreparationTime(totalTime)} calories={calories} />\n      </div>\n    );\n  }\n}\n\nexport default RecipeCard"]},"metadata":{},"sourceType":"module"}