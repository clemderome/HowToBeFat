{"ast":null,"code":"var _jsxFileName = \"/Users/citrounette/Documents/HTBF/src/components/RecipeCard.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport DisplayRecipe from './DisplayRecipe';\nimport Waiting from './Waiting';\nconst ingredientsArray = ['beef', 'pork', 'salmon', 'shrimp', 'lamb', 'sheep', 'chicken', 'ham', 'pasta', 'tomato', 'zucchini', 'carrot', 'pea', 'bean', 'chocolate', 'vanilla', 'turkey', 'rabbit', 'eggplant', 'avocado', 'cheese', 'bacon', 'cherry', 'banana', 'apple', 'pear', 'orange', 'kiwi', 'flour', 'sugar', 'pepper', 'cucumber', 'milk', 'bread', 'butter', 'rum', 'peanut', 'pistachio', 'wine', 'onion', 'garlic', 'coriander', 'parsley', 'thyme', 'potato', 'turnip', 'asparagus', 'rice', 'egg', 'fish', 'sausage', 'celery'];\n\nclass RecipeCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      recipe: '',\n      ingredients: []\n    };\n\n    this.randomNumber = max => Math.floor(Math.random() * Math.floor(max));\n\n    this.getOtherRecipe = () => {\n      this.getRecipe();\n    };\n  }\n\n  getRecipe() {\n    let selectedIngredients = `${ingredientsArray[Math.floor(Math.random() * ingredientsArray.length)]}`;\n    const min = 0;\n    const max = min + 100;\n    const minCalories = 100000;\n    const maxCalories = minCalories + 100000;\n    let url = `https://api.edamam.com/search?q=${selectedIngredients}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`;\n    axios.get(url).then(res => {\n      // base of the calls\n      const res1 = res.data.hits;\n      const randomNum = this.randomNumber(res1.length); //sort by calories desc\n\n      const thisCalories = res1.map(x => x.recipe.calories);\n      const sort = thisCalories.sort((a, b) => b - a)[randomNum]; // Search for the recipe whom match with the max of calories\n\n      const objectUri = res1.filter(x => x.recipe.calories === sort)[0]; // Define the state with the research recipe and the ingredients which go with\n\n      res1.length === 0 ? this.getRecipe() : this.setState({\n        recipe: objectUri.recipe,\n        ingredients: objectUri.recipe.ingredientLines\n      });\n    }).catch(e => console.log(e)); // Display an error message in the console if occured for help to fixed it\n  }\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0;\n    const unity = hours > 1 ? \"hours\" : \"hour\";\n    const minutes = time > 60 ? time % 60 : time;\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`;\n  }\n\n  componentDidMount() {\n    this.getRecipe();\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime;\n    const calories = Math.round(this.state.recipe.calories);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"RecipeCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, this.state.recipe ? /*#__PURE__*/React.createElement(DisplayRecipe, {\n      getOtherRecipe: this.getOtherRecipe,\n      ingredientsList: this.state.ingredients,\n      recipe: this.state.recipe,\n      preparationTime: this.getPreparationTime(totalTime),\n      calories: calories,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 12\n      }\n    }) : /*#__PURE__*/React.createElement(Waiting, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 14\n      }\n    }));\n  }\n\n}\n\nexport default RecipeCard;","map":{"version":3,"sources":["/Users/citrounette/Documents/HTBF/src/components/RecipeCard.js"],"names":["React","axios","DisplayRecipe","Waiting","ingredientsArray","RecipeCard","Component","state","recipe","ingredients","randomNumber","max","Math","floor","random","getOtherRecipe","getRecipe","selectedIngredients","length","min","minCalories","maxCalories","url","get","then","res","res1","data","hits","randomNum","thisCalories","map","x","calories","sort","a","b","objectUri","filter","setState","ingredientLines","catch","e","console","log","getPreparationTime","time","hours","unity","minutes","componentDidMount","render","totalTime","round"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport DisplayRecipe from './DisplayRecipe'\nimport Waiting from './Waiting'\n\nconst ingredientsArray = ['beef', 'pork', 'salmon', 'shrimp', 'lamb', 'sheep', 'chicken', 'ham', 'pasta', 'tomato', 'zucchini', 'carrot', 'pea', 'bean', 'chocolate', 'vanilla', 'turkey', 'rabbit', 'eggplant', 'avocado', 'cheese', 'bacon', 'cherry', 'banana', 'apple', 'pear', 'orange', 'kiwi', 'flour', 'sugar', 'pepper', 'cucumber', 'milk', 'bread', 'butter', 'rum', 'peanut', 'pistachio', 'wine', 'onion', 'garlic', 'coriander', 'parsley', 'thyme', 'potato', 'turnip', 'asparagus', 'rice', 'egg', 'fish', 'sausage', 'celery']\n\nclass RecipeCard extends React.Component {\n\n  state = {\n    recipe: '',\n    ingredients: []\n  }\n\n  getRecipe() {\n    let selectedIngredients = `${ingredientsArray[Math.floor(Math.random() * ingredientsArray.length)]}`\n    const min = 0\n    const max = min + 100\n    const minCalories = 100000\n    const maxCalories = minCalories + 100000\n    let url = `https://api.edamam.com/search?q=${selectedIngredients}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`\n\n    axios.get(url)\n      .then((res) => {\n        // base of the calls\n        const res1 = res.data.hits\n        const randomNum = this.randomNumber(res1.length)\n        //sort by calories desc\n        const thisCalories = res1.map(x => x.recipe.calories)\n        const sort = thisCalories.sort((a, b) => b - a)[randomNum]\n        // Search for the recipe whom match with the max of calories\n        const objectUri = res1.filter(x => x.recipe.calories === sort)[0]\n        // Define the state with the research recipe and the ingredients which go with\n\n        res1.length === 0 ? this.getRecipe() :\n          this.setState({\n            recipe: objectUri.recipe,\n            ingredients: objectUri.recipe.ingredientLines\n          })\n      })\n      .catch((e) => console.log(e))  // Display an error message in the console if occured for help to fixed it\n  }\n\n  randomNumber = (max) => Math.floor(Math.random() * Math.floor(max))\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0\n    const unity = hours > 1 ? \"hours\" : \"hour\"\n    const minutes = time > 60 ? time % 60 : time\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`\n  }\n\n  getOtherRecipe = () => {\n    this.getRecipe()\n  }\n\n  componentDidMount() {\n    this.getRecipe()\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime\n    const calories = Math.round(this.state.recipe.calories)\n    return (\n      <div className=\"RecipeCard\" >\n        {this.state.recipe ?\n          (<DisplayRecipe getOtherRecipe={this.getOtherRecipe} ingredientsList={this.state.ingredients} recipe={this.state.recipe} preparationTime={this.getPreparationTime(totalTime)} calories={calories} />)\n          : (<Waiting />)}\n      </div>\n    );\n  }\n}\n\nexport default RecipeCard"]},"metadata":{},"sourceType":"module"}