{"ast":null,"code":"var _jsxFileName = \"/Users/citrounette/Documents/Projets/WCS_Project_2/paris-0320-project2-howToBeFat/src/components/RecipeCard.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport DisplayRecipe from './DisplayRecipe';\nimport Waiting from './Waiting';\nconst ingredientsArray = ['beef', 'pork', 'salmon', 'shrimp', 'lamb', 'sheep', 'chicken', 'ham', 'pasta', 'tomato', 'spinach', 'zucchini', 'carrot', 'pea', 'bean', 'chocolate', 'vanilla', 'turkey', 'rabbit', 'truffle', 'eggplant', ' endive', 'cheese', 'bacon', 'cherry', 'banana', 'apple', 'pear', 'orange', 'kiwi', 'flour', 'sugar', 'pepper', 'cucumber', 'milk', 'bread', 'butter', 'rum', 'peanut', 'pistachio', 'salad', 'wine', 'onion', 'garlic', 'coriander', 'parsley', 'thyme', 'potato', 'turnip', 'asparagus', 'cauliflower', 'broccoli', 'mushroom', 'rice', 'egg', 'fish', 'sausage', 'celery', 'thom'];\n\nclass RecipeCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      recipe: '',\n      ingredients: []\n    };\n\n    this.randomNumber = max => Math.floor(Math.random() * Math.floor(max));\n\n    this.getOtherRecipe = () => {\n      this.getRecipe();\n    };\n  }\n\n  getRecipe() {\n    let selectedIngredients = `${ingredientsArray[Math.floor(Math.random() * ingredientsArray.length)]}`;\n    const min = 0;\n    const max = min + 100;\n    const minCalories = 5000;\n    const maxCalories = minCalories + 5000;\n    let url = `https://api.edamam.com/search?q=${selectedIngredients}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`;\n    axios.get(url).then(res => {\n      const randomNum = this.randomNumber(max); // base of the calls\n\n      const res1 = res.data.hits; //sort by calories desc\n\n      const thisCalories = res1.map(x => x.recipe.calories).sort((a, b) => b - a)[randomNum]; // Search for the recipe whom match with the max of calories\n\n      const objectUri = res1.filter(x => x.recipe.calories === thisCalories)[0]; // Define the state with the research recipe and the ingredients which go with\n\n      this.setState({\n        recipe: objectUri.recipe,\n        ingredients: objectUri.recipe.ingredientLines\n      });\n    });\n  }\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0;\n    const unity = hours > 1 ? \"hours\" : \"hour\";\n    const minutes = time > 60 ? time % 60 : time;\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`;\n  }\n\n  componentDidMount() {\n    this.getRecipe();\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime;\n    const calories = Math.round(this.state.recipe.calories);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"RecipeCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, this.state.recipe ? /*#__PURE__*/React.createElement(DisplayRecipe, {\n      getOtherRecipe: this.getOtherRecipe,\n      ingredientsList: this.state.ingredients,\n      recipe: this.state.recipe,\n      preparationTime: this.getPreparationTime(totalTime),\n      calories: calories,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 12\n      }\n    }) : /*#__PURE__*/React.createElement(Waiting, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 14\n      }\n    }));\n  }\n\n}\n\nexport default RecipeCard;","map":{"version":3,"sources":["/Users/citrounette/Documents/Projets/WCS_Project_2/paris-0320-project2-howToBeFat/src/components/RecipeCard.js"],"names":["React","axios","DisplayRecipe","Waiting","ingredientsArray","RecipeCard","Component","state","recipe","ingredients","randomNumber","max","Math","floor","random","getOtherRecipe","getRecipe","selectedIngredients","length","min","minCalories","maxCalories","url","get","then","res","randomNum","res1","data","hits","thisCalories","map","x","calories","sort","a","b","objectUri","filter","setState","ingredientLines","getPreparationTime","time","hours","unity","minutes","componentDidMount","render","totalTime","round"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport DisplayRecipe from './DisplayRecipe'\nimport Waiting from './Waiting'\n\nconst ingredientsArray = ['beef', 'pork', 'salmon', 'shrimp', 'lamb', 'sheep', 'chicken', 'ham', 'pasta', 'tomato', 'spinach', 'zucchini', 'carrot', 'pea', 'bean', 'chocolate', 'vanilla', 'turkey', 'rabbit', 'truffle', 'eggplant', ' endive', 'cheese', 'bacon', 'cherry', 'banana', 'apple', 'pear', 'orange', 'kiwi', 'flour', 'sugar', 'pepper', 'cucumber', 'milk', 'bread', 'butter', 'rum', 'peanut', 'pistachio', 'salad', 'wine', 'onion', 'garlic', 'coriander', 'parsley', 'thyme', 'potato', 'turnip', 'asparagus', 'cauliflower', 'broccoli', 'mushroom', 'rice', 'egg', 'fish', 'sausage', 'celery', 'thom']\n\nclass RecipeCard extends React.Component {\n\n  state = {\n    recipe: '',\n    ingredients: []\n  }\n\n  getRecipe() {\n\n    let selectedIngredients = `${ingredientsArray[Math.floor(Math.random() * ingredientsArray.length)]}`\n    const min = 0\n    const max = min + 100\n    const minCalories = 5000\n    const maxCalories = minCalories + 5000\n    let url = `https://api.edamam.com/search?q=${selectedIngredients}&from=${min}&to=${max}&calories=${minCalories}-${maxCalories}&app_id=812f083c&app_key=57cd06930f1a1d5818380b512897cc58`\n\n    axios.get(url)\n      .then((res) => {\n        const randomNum = this.randomNumber(max)\n        // base of the calls\n        const res1 = res.data.hits\n        //sort by calories desc\n        const thisCalories = res1.map(x => x.recipe.calories).sort((a, b) => b - a)[randomNum]\n        // Search for the recipe whom match with the max of calories\n        const objectUri = res1.filter(x => x.recipe.calories === thisCalories)[0]\n        // Define the state with the research recipe and the ingredients which go with\n        this.setState({\n          recipe: objectUri.recipe,\n          ingredients: objectUri.recipe.ingredientLines\n        })\n      })\n  }\n\n  randomNumber = (max) => Math.floor(Math.random() * Math.floor(max))\n\n  getPreparationTime(time) {\n    const hours = time > 60 ? Math.floor(time / 60) : 0\n    const unity = hours > 1 ? \"hours\" : \"hour\"\n    const minutes = time > 60 ? time % 60 : time\n    return time > 60 ? `${hours} ${unity} and ${minutes} minutes` : `${minutes} minutes`\n  }\n\n  getOtherRecipe = () => {\n    this.getRecipe()\n  }\n\n  componentDidMount() {\n    this.getRecipe()\n  }\n\n  render() {\n    const totalTime = this.state.recipe.totalTime\n    const calories = Math.round(this.state.recipe.calories)\n\n    return (\n      <div className=\"RecipeCard\" >\n        {this.state.recipe ?\n          (<DisplayRecipe getOtherRecipe={this.getOtherRecipe} ingredientsList={this.state.ingredients} recipe={this.state.recipe} preparationTime={this.getPreparationTime(totalTime)} calories={calories} />)\n          : (<Waiting />)}\n      </div>\n    );\n  }\n}\n\nexport default RecipeCard"]},"metadata":{},"sourceType":"module"}